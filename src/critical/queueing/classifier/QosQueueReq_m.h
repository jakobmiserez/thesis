//
// Generated file, do not edit! Created by nedtool 5.6 from critical/queueing/classifier/QosQueueReq.msg.
//

#ifndef __CRITICAL_QOSQUEUEREQ_M_H
#define __CRITICAL_QOSQUEUEREQ_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace critical {

class QosQueueReq;
} // namespace critical

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace critical {

/**
 * Class generated from <tt>critical/queueing/classifier/QosQueueReq.msg:6</tt> by nedtool.
 * <pre>
 * class QosQueueReq extends inet::TagBase
 * {
 *     int queue = -1;
 * }
 * </pre>
 */
class QosQueueReq : public ::inet::TagBase
{
  protected:
    int queue = -1;

  private:
    void copy(const QosQueueReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QosQueueReq&);

  public:
    QosQueueReq();
    QosQueueReq(const QosQueueReq& other);
    virtual ~QosQueueReq();
    QosQueueReq& operator=(const QosQueueReq& other);
    virtual QosQueueReq *dup() const override {return new QosQueueReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getQueue() const;
    virtual void setQueue(int queue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QosQueueReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QosQueueReq& obj) {obj.parsimUnpack(b);}

} // namespace critical

#endif // ifndef __CRITICAL_QOSQUEUEREQ_M_H

