//
// Generated file, do not edit! Created by nedtool 5.6 from critical/protocols/probing/packets/ProbingPackets.msg.
//

#ifndef __CRITICAL__PROBING_PROBINGPACKETS_M_H
#define __CRITICAL__PROBING_PROBINGPACKETS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace critical {
namespace probing {

class ProbingPacketBase;
class FlowPrunePacket;
struct FlowProbeStats;
class FlowProbePacket;
class FlowConfirmPacket;
class FlowFreePacket;
class FlowFreeFailurePacket;
} // namespace probing
} // namespace critical

#include "critical/common/packet/CriticalPacketBase_m.h" // import critical.common.packet.CriticalPacketBase

#include "inet/networklayer/contract/ipv6/Ipv6Address_m.h" // import inet.networklayer.contract.ipv6.Ipv6Address


namespace critical {
namespace probing {

/**
 * Class generated from <tt>critical/protocols/probing/packets/ProbingPackets.msg:7</tt> by nedtool.
 * <pre>
 * class ProbingPacketBase extends CriticalPacketBase
 * {
 *     critical::FlowId flow; // 36 B
 * 
 *     chunkLength = inet::B(37);
 * }
 * </pre>
 */
class ProbingPacketBase : public ::critical::CriticalPacketBase
{
  protected:
    critical::FlowId flow;

  private:
    void copy(const ProbingPacketBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ProbingPacketBase&);

  public:
    ProbingPacketBase();
    ProbingPacketBase(const ProbingPacketBase& other);
    virtual ~ProbingPacketBase();
    ProbingPacketBase& operator=(const ProbingPacketBase& other);
    virtual ProbingPacketBase *dup() const override {return new ProbingPacketBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const critical::FlowId& getFlow() const;
    virtual critical::FlowId& getFlowForUpdate() { handleChange();return const_cast<critical::FlowId&>(const_cast<ProbingPacketBase*>(this)->getFlow());}
    virtual void setFlow(const critical::FlowId& flow);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProbingPacketBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProbingPacketBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>critical/protocols/probing/packets/ProbingPackets.msg:15</tt> by nedtool.
 * <pre>
 * class FlowPrunePacket extends ProbingPacketBase
 * {
 *     type = PROBE_PRUNE;
 * 
 *     chunkLength = inet::B(38);
 * }
 * </pre>
 */
class FlowPrunePacket : public ::critical::probing::ProbingPacketBase
{
  protected:

  private:
    void copy(const FlowPrunePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FlowPrunePacket&);

  public:
    FlowPrunePacket();
    FlowPrunePacket(const FlowPrunePacket& other);
    virtual ~FlowPrunePacket();
    FlowPrunePacket& operator=(const FlowPrunePacket& other);
    virtual FlowPrunePacket *dup() const override {return new FlowPrunePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowPrunePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowPrunePacket& obj) {obj.parsimUnpack(b);}

/**
 * Struct generated from critical/protocols/probing/packets/ProbingPackets.msg:21 by nedtool.
 */
struct FlowProbeStats
{
    FlowProbeStats();
    uint64_t accumulatedDelay;
    uint32_t hops;
    uint32_t totalHopEstimate;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const FlowProbeStats& a);
void __doUnpacking(omnetpp::cCommBuffer *b, FlowProbeStats& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowProbeStats& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowProbeStats& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>critical/protocols/probing/packets/ProbingPackets.msg:28</tt> by nedtool.
 * <pre>
 * class FlowProbePacket extends ProbingPacketBase
 * {
 *     type = PROBE_PROBE;
 * 
 *     critical::FlowParameters params; // 24 bytes 
 * 
 *     FlowProbeStats stats; // 16 bytes 
 * 
 *     chunkLength = inet::B(77);
 * }
 * </pre>
 */
class FlowProbePacket : public ::critical::probing::ProbingPacketBase
{
  protected:
    critical::FlowParameters params;
    FlowProbeStats stats;

  private:
    void copy(const FlowProbePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FlowProbePacket&);

  public:
    FlowProbePacket();
    FlowProbePacket(const FlowProbePacket& other);
    virtual ~FlowProbePacket();
    FlowProbePacket& operator=(const FlowProbePacket& other);
    virtual FlowProbePacket *dup() const override {return new FlowProbePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const critical::FlowParameters& getParams() const;
    virtual critical::FlowParameters& getParamsForUpdate() { handleChange();return const_cast<critical::FlowParameters&>(const_cast<FlowProbePacket*>(this)->getParams());}
    virtual void setParams(const critical::FlowParameters& params);
    virtual const FlowProbeStats& getStats() const;
    virtual FlowProbeStats& getStatsForUpdate() { handleChange();return const_cast<FlowProbeStats&>(const_cast<FlowProbePacket*>(this)->getStats());}
    virtual void setStats(const FlowProbeStats& stats);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowProbePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowProbePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>critical/protocols/probing/packets/ProbingPackets.msg:38</tt> by nedtool.
 * <pre>
 * class FlowConfirmPacket extends ProbingPacketBase
 * {
 *     type = PROBE_CONFIRM;
 * }
 * </pre>
 */
class FlowConfirmPacket : public ::critical::probing::ProbingPacketBase
{
  protected:

  private:
    void copy(const FlowConfirmPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FlowConfirmPacket&);

  public:
    FlowConfirmPacket();
    FlowConfirmPacket(const FlowConfirmPacket& other);
    virtual ~FlowConfirmPacket();
    FlowConfirmPacket& operator=(const FlowConfirmPacket& other);
    virtual FlowConfirmPacket *dup() const override {return new FlowConfirmPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowConfirmPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowConfirmPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>critical/protocols/probing/packets/ProbingPackets.msg:42</tt> by nedtool.
 * <pre>
 * class FlowFreePacket extends ProbingPacketBase
 * {
 *     type = PROBE_FREE;
 * }
 * </pre>
 */
class FlowFreePacket : public ::critical::probing::ProbingPacketBase
{
  protected:

  private:
    void copy(const FlowFreePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FlowFreePacket&);

  public:
    FlowFreePacket();
    FlowFreePacket(const FlowFreePacket& other);
    virtual ~FlowFreePacket();
    FlowFreePacket& operator=(const FlowFreePacket& other);
    virtual FlowFreePacket *dup() const override {return new FlowFreePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowFreePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowFreePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>critical/protocols/probing/packets/ProbingPackets.msg:46</tt> by nedtool.
 * <pre>
 * class FlowFreeFailurePacket extends ProbingPacketBase
 * {
 *     type = PROBE_FREE_FAILURE;
 * }
 * </pre>
 */
class FlowFreeFailurePacket : public ::critical::probing::ProbingPacketBase
{
  protected:

  private:
    void copy(const FlowFreeFailurePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FlowFreeFailurePacket&);

  public:
    FlowFreeFailurePacket();
    FlowFreeFailurePacket(const FlowFreeFailurePacket& other);
    virtual ~FlowFreeFailurePacket();
    FlowFreeFailurePacket& operator=(const FlowFreeFailurePacket& other);
    virtual FlowFreeFailurePacket *dup() const override {return new FlowFreeFailurePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowFreeFailurePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowFreeFailurePacket& obj) {obj.parsimUnpack(b);}

} // namespace probing
} // namespace critical

#endif // ifndef __CRITICAL__PROBING_PROBINGPACKETS_M_H

